<?php

namespace App\Tests\Factory;

use ApiPlatform\Api\UrlGeneratorInterface;
use App\Entity\Beneficiaire;
use App\Entity\Document;
use App\Entity\User;
use App\Factory\SharedDocumentFactory;
use Doctrine\ORM\EntityManagerInterface;
use Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class SharedDocumentFactoryTest extends KernelTestCase
{
    private EntityManagerInterface $em;
    private Beneficiaire $beneficiaire;
    private Document $document;
    private User $user;
    private SharedDocumentFactory $factory;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->em = self::getContainer()->get('doctrine')->getManager();
        $urlGenerator = self::getContainer()->get(UrlGeneratorInterface::class);
        $tokenManager = $this->createMock(JWTTokenManagerInterface::class);
        $this->factory = new SharedDocumentFactory($this->em, $tokenManager, $urlGenerator);
        $this->user = $this->generateOrFindUser();
        $this->em->persist($this->user);
        $this->beneficiaire = $this->generateBeneficiaire();
        $this->em->persist($this->beneficiaire);
        $this->document = $this->generateDocument();
        $this->em->persist($this->document);
        $this->em->flush();
    }

    public function testGenerateSharedDocument(): void
    {
        $sharedDocument = $this->factory->generateSharedDocument($this->user, $this->document, 'marcanmalas@gmail.com');
        $this->assertIsObject($sharedDocument);
        $this->assertIsObject($sharedDocument->getDocument());
        $this->assertIsObject($sharedDocument->getSharedAt());
        $this->assertIsObject($sharedDocument->getExpirationDate());
        $this->assertIsObject($sharedDocument->getSharedBy());
        $this->assertIsInt($sharedDocument->getSharedBy()->getId());
        $this->assertIsInt($sharedDocument->getDocument()->getId());
        $this->assertIsString($sharedDocument->getSharedWithEmail());
        $this->assertIsString($sharedDocument->getSelector());
    }

    private function generateOrFindUser(): User
    {
        $user = $this->em->getRepository(User::class)->findOneBy(['username' => 'marco.malaspina.28/06/1990']);

        return $user ?? (new User())->setNom('Malaspina')
                ->setPrenom('Marco')
                ->setUsername('marco.malaspina.28/06/1990')
                ->setPassword('lalilulelo')
                ->setTest(true)
                ->setTypeUser('ROLE_MEMBRE');
    }

    private function generateBeneficiaire(): ?Beneficiaire
    {
        return $this->user->isBeneficiaire() && $this->user->getSubjectBeneficiaire()
            ? $this->user->getSubjectBeneficiaire()
            : (new Beneficiaire())
                ->setDateNaissance(new \DateTime('now'))
                ->setUser($this->user);
    }

    private function generateDocument(): Document
    {
        return (new Document())
            ->setNom('mon document')
            ->setTaille(500)
            ->setBeneficiaire($this->beneficiaire);
    }
}
